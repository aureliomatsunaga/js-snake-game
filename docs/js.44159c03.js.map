{"version":3,"sources":["js/Direction.js","js/Queue.js","js/Snake.js","js/Food.js","js/Nevesnake.js","js/index.js"],"names":["RIGHT","LEFT","DOWN","UP","Queue","items","undefined","forEach","item","insert","_next","aux","count","index","Snake","initialPosX","initialPosY","x","y","direction","blockSize","Direction","size","getByIndex","i","head","nextStep","Food","_blockSize","image","Image","regenerate","_imageIndex","Math","floor","random","src","moreNeves","lessNeves","Nevesnake","canvasSelector","speed","_context","document","querySelector","getContext","_speed","_score","_direction","_snake","_food","_configureBackground","_configureControls","_configureSounds","_background","background","addEventListener","event","key","_leftAudio","play","_upAudio","_rightAudio","_downAudio","_lessNevesAudio","Audio","lessNevesAudio","_moreNevesAudio","moreNevesAudio","_gameOverAudio","gameOverAudio","_fadeOutAudio","fadeOutAudio","rightAudio","leftAudio","downAudio","upAudio","fillStyle","font","fillText","bodyPart","fillRect","strokeStyle","strokeRect","_hasCollided","end","willGrow","walk","remove","drawImage","_renderScoreboard","_renderSnake","_evaluateCollision","_evaluateFoodCaught","_interval","setInterval","self","render","sound","clearInterval","CANVAS","SPEED","start"],"mappings":"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","file":"js.44159c03.js","sourceRoot":"..\\src","sourcesContent":["\r\n/**\r\n * Enumeration to limit the directions the snake can head to.\r\n * @enum\r\n * @author Julio Muller & Aurelio Matsunaga\r\n * @version 1.1.0\r\n */\r\nexport default {\r\n  RIGHT: 'RIGHT',\r\n  LEFT: 'LEFT',\r\n  DOWN: 'DOWN',\r\n  UP: 'UP',\r\n}\r\n","\r\n/**\r\n * Class to build a data sctructure of queue.\r\n *\r\n * @class\r\n * @author Julio Muller & Aurelio Matsunaga\r\n * @version 1.3.0\r\n */\r\nexport default class Queue {\r\n\r\n  /**\r\n   * Instances an object structured as queue.\r\n   *\r\n   * @constructor\r\n   * @param {any} items List of iterable items to be added to the queue.\r\n   */\r\n  constructor(...items) {\r\n    this.items = undefined\r\n    items.forEach((item) => this.insert(item))\r\n  }\r\n\r\n  /**\r\n   * Adds an object to the end of the queue.\r\n   *\r\n   * @param {any} item Object to be added to the structure.\r\n   */\r\n  insert(item) {\r\n    item._next = undefined\r\n    if (this.items) {\r\n      let aux = this.items\r\n      while (aux._next !== undefined) { aux = aux._next }\r\n      aux._next = item\r\n    } else {\r\n      this.items = item\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes the first/oldest object from the queue, returning it.\r\n   *\r\n   * @returns {any}\r\n   */\r\n  remove() {\r\n    const aux = this.items\r\n    this.items = this.items._next\r\n    delete aux._next\r\n    return aux\r\n  }\r\n\r\n  /**\r\n   * Returns the quantity of items in the queue.\r\n   *\r\n   * @returns {number}\r\n   */\r\n  size() {\r\n    if (!this.items) { return 0 }\r\n    let aux = this.items\r\n    let count = 1\r\n    while (aux._next !== undefined) {\r\n      aux = aux._next\r\n      count++\r\n    }\r\n    return count\r\n  }\r\n\r\n  /**\r\n   * Returns the value in the (index+1)th position in the structure.\r\n   *\r\n   * @param {number} index Index of the item in the structure (starting with 0)\r\n   * @returns {any}\r\n   */\r\n  getByIndex(index) {\r\n    let aux = this.items\r\n    let count = 0\r\n    while (count < index) {\r\n      aux = aux._next\r\n      count++\r\n    }\r\n    return aux\r\n  }\r\n}\r\n","import Queue from './Queue'\r\nimport Direction from './Direction'\r\n\r\n/**\r\n * Class to build a snake for the game.\r\n *\r\n * @class\r\n * @author Julio Muller & Aurelio Matsunaga\r\n * @version 1.3.0\r\n */\r\nexport default class Snake extends Queue {\r\n\r\n  /**\r\n   * Instances an object of snake, receiving its initial head coordinates.\r\n   *\r\n   * @constructor\r\n   * @param {number} initialPosX Initial position in X axis.\r\n   * @param {number} initialPosY Initial position in Y axis.\r\n   */\r\n  constructor(initialPosX, initialPosY) {\r\n    super()\r\n\r\n    if (initialPosX && initialPosY) {\r\n      this.insert({\r\n        x: initialPosX,\r\n        y: initialPosY,\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinates of the next step the snake is heading to, based on a direction.\r\n   *\r\n   * @param {Direction} direction Indicates the direction the snake's head is going to.\r\n   * @param {number} blockSize Indicates the size of each block and how much the snake walks on each step.\r\n   * @returns {any}\r\n   */\r\n  nextStep(direction, blockSize) {\r\n    let { x, y } = this.items\r\n\r\n    switch (direction) {\r\n      case Direction.UP:\r\n        y -= blockSize\r\n        break\r\n      case Direction.DOWN:\r\n        y += blockSize\r\n        break\r\n      case Direction.LEFT:\r\n        x -= blockSize\r\n        break\r\n      case Direction.RIGHT:\r\n        x += blockSize\r\n        break\r\n      default:\r\n        /* do nothing */\r\n    }\r\n\r\n    return { x, y }\r\n  }\r\n\r\n  /**\r\n   * Updates the position of the entire body of the snake, based on a direction and returning its last tail coordinates.\r\n   *\r\n   * @param {Direction} direction Indicates the direction the snake's head is going to.\r\n   * @param {number} blockSize Indicates the size of each block and how much the snake walks on each step.\r\n   * @returns {any}\r\n   */\r\n  walk(direction, blockSize = 1) {\r\n    const size = this.size()\r\n    const { x, y } = this.getByIndex(size - 1)\r\n\r\n    for (let i = (size - 1); i > 0; i--) {\r\n      this.getByIndex(i).x = this.getByIndex(i - 1).x\r\n      this.getByIndex(i).y = this.getByIndex(i - 1).y\r\n    }\r\n\r\n    const head = this.nextStep(direction, blockSize)\r\n    this.items.x = head.x\r\n    this.items.y = head.y\r\n\r\n    return { x, y }\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinates of the snake's head.\r\n   *\r\n   * @returns {any}\r\n   */\r\n  getHead() {\r\n    const { x, y } = this.items\r\n    return { x, y }\r\n  }\r\n}\r\n","import moreNeves from '../img/more-neves.png'\r\nimport lessNeves from '../img/less-neves.png'\r\n\r\n/**\r\n * Class to store coordinates for the snake's food in the game.\r\n *\r\n * @class\r\n * @author Julio Muller & Aurelio Matsunaga\r\n * @version 1.2.0\r\n */\r\nexport default class Food {\r\n\r\n  /**\r\n   * Instances an object of food with a random coordinate to be placed in the board.\r\n   *\r\n   * @constructor\r\n   * @param {number} initialPosX Initial position in X axis.\r\n   */\r\n  constructor(blockSize) {\r\n    this._blockSize = blockSize\r\n    this.image = new Image()\r\n\r\n    this.regenerate(0)\r\n  }\r\n\r\n  /**\r\n   * Regenerate the random coordinates for axis X and Y.\r\n   */\r\n  regenerate(index) {\r\n    const PROBABILITY = 1.4   // Probability to return <1 is 133% greater tahn >=1\r\n    this._imageIndex = index === 0 ? index : Math.floor(Math.random() * PROBABILITY)\r\n    this.image.src = [moreNeves, lessNeves][this._imageIndex]\r\n    this.x = Math.floor(Math.random() * 17 + 1) * this._blockSize\r\n    this.y = Math.floor(Math.random() * 15 + 3) * this._blockSize\r\n  }\r\n\r\n  willGrow() {\r\n    return (this._imageIndex === 0)\r\n  }\r\n}\r\n","import Direction from './Direction'\r\nimport Snake from './Snake'\r\nimport Food from './Food'\r\n\r\nimport background from '../img/background.png'\r\nimport lessNevesAudio from '../audio/less-neves.mp3'\r\nimport moreNevesAudio from '../audio/more-neves.mp3'\r\nimport gameOverAudio from '../audio/game-over.mp3'\r\nimport fadeOutAudio from '../audio/fade-out.mp3'\r\nimport rightAudio from '../audio/go-right.mp3'\r\nimport leftAudio from '../audio/go-left.mp3'\r\nimport downAudio from '../audio/go-down.mp3'\r\nimport upAudio from '../audio/go-up.mp3'\r\n\r\nexport default class Nevesnake {\r\n\r\n  constructor(canvasSelector, speed) {\r\n    this._context = document.querySelector(canvasSelector).getContext('2d')\r\n    this._speed = speed\r\n\r\n    this._score = 0\r\n    this._blockSize = 32\r\n    this._direction = null\r\n    this._snake = new Snake(9 * this._blockSize, 10 * this._blockSize)\r\n    this._food = new Food(this._blockSize)\r\n\r\n    this._configureBackground()\r\n    this._configureControls()\r\n    this._configureSounds()\r\n  }\r\n\r\n  _configureBackground() {\r\n    this._background = new Image()\r\n    this._background.src = background\r\n  }\r\n\r\n  _configureControls() {\r\n    document.addEventListener('keydown', (event) => {\r\n      if (event.key === 'ArrowLeft' && this._direction !== Direction.RIGHT && this._direction !== Direction.LEFT) {\r\n        this._direction = Direction.LEFT\r\n        this._leftAudio.play()\r\n      } else if (event.key === 'ArrowUp' && this._direction !== Direction.DOWN && this._direction !== Direction.UP) {\r\n        this._direction = Direction.UP\r\n        this._upAudio.play()\r\n      } else if (event.key === 'ArrowRight' && this._direction !== Direction.LEFT && this._direction !== Direction.RIGHT) {\r\n        this._direction = Direction.RIGHT\r\n        this._rightAudio.play()\r\n      } else if (event.key === 'ArrowDown' && this._direction !== Direction.UP && this._direction !== Direction.DOWN) {\r\n        this._direction = Direction.DOWN\r\n        this._downAudio.play()\r\n      }\r\n    })\r\n  }\r\n\r\n  _configureSounds() {\r\n    this._lessNevesAudio = new Audio(lessNevesAudio)\r\n    this._moreNevesAudio = new Audio(moreNevesAudio)\r\n    this._gameOverAudio = new Audio(gameOverAudio)\r\n    this._fadeOutAudio = new Audio(fadeOutAudio)\r\n    this._rightAudio = new Audio(rightAudio)\r\n    this._leftAudio = new Audio(leftAudio)\r\n    this._downAudio = new Audio(downAudio)\r\n    this._upAudio = new Audio(upAudio)\r\n  }\r\n\r\n  _renderScoreboard() {\r\n    this._context.fillStyle = 'white'\r\n    this._context.font = '45px Changa one'\r\n    this._context.fillText(this._score, 2 * this._blockSize, 1.6 * this._blockSize)\r\n  }\r\n\r\n  _renderSnake() {\r\n    for (let i = 0; i < this._snake.size(); i++) {\r\n      const bodyPart = this._snake.getByIndex(i)\r\n      this._context.fillStyle = i === 0 ? 'green' : 'white'\r\n      this._context.fillRect(bodyPart.x, bodyPart.y, this._blockSize, this._blockSize)\r\n      this._context.strokeStyle = 'red'\r\n      this._context.strokeRect(bodyPart.x, bodyPart.y, this._blockSize, this._blockSize)\r\n    }\r\n  }\r\n\r\n  _evaluateCollision(nextStep) {\r\n    if (this._hasCollided(nextStep)) {\r\n      this.end(this._gameOverAudio)\r\n    }\r\n  }\r\n\r\n  _evaluateFoodCaught(nextStep) {\r\n    if (nextStep.x === this._food.x && nextStep.y === this._food.y) {\r\n      this._score++\r\n      if (this._food.willGrow()) {\r\n        this._snake.insert(this._snake.walk(this._direction, this._blockSize))\r\n        this._moreNevesAudio.play()\r\n      } else {\r\n        this._snake.walk(this._direction, this._blockSize)\r\n        this._snake.remove()\r\n        if (this._snake.size()) {\r\n          this._lessNevesAudio.play()\r\n        } else {\r\n          this.end(this._fadeOutAudio)\r\n        }\r\n      }\r\n      this._food.regenerate()\r\n    } else {\r\n      this._snake.walk(this._direction, this._blockSize)\r\n    }\r\n  }\r\n\r\n  _hasCollided(nextStep) {\r\n    // Validate collision at the border of the board\r\n    if (\r\n      nextStep.x < this._blockSize || nextStep.x > 17 * this._blockSize\r\n      || nextStep.y < 3 * this._blockSize || nextStep.y > 17 * this._blockSize\r\n    ) {\r\n      return true\r\n    }\r\n\r\n    // Validate collision at snake's body\r\n    for (let i = 1; i < this._snake.size(); i++) {\r\n      const bodyPart = this._snake.getByIndex(i)\r\n      if (nextStep.x === bodyPart.x && nextStep.y === bodyPart.y) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    this._context.drawImage(this._background, 0, 0)\r\n    this._context.drawImage(this._food.image, this._food.x, this._food.y)\r\n    this._renderScoreboard()\r\n    this._renderSnake()\r\n\r\n    const nextStep = this._snake.nextStep(this._direction, this._blockSize)\r\n    this._evaluateCollision(nextStep)\r\n    this._evaluateFoodCaught(nextStep)\r\n  }\r\n\r\n  start() {\r\n    this._interval = setInterval((self) => self.render(), this._speed, this)\r\n  }\r\n\r\n  end(sound) {\r\n    clearInterval(this._interval)\r\n    if (sound) {\r\n      sound.play()\r\n    }\r\n  }\r\n}\r\n","import Nevesnake from './Nevesnake'\r\n\r\nconst CANVAS = '#the-snake'\r\nconst SPEED = 160\r\n\r\nnew Nevesnake(CANVAS, SPEED).start()\r\n"]}